0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@3.8.3
3 info using node@v5.2.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/shane/dev/memwatch-ng',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/shane/.npm/memwatch-ng/0.4.0/package.tgz not in flight; packing
9 verbose correctMkdir /Users/shane/.npm correctMkdir not in flight; initializing
10 info lifecycle memwatch-ng@0.4.0~prepublish: memwatch-ng@0.4.0
11 silly lifecycle memwatch-ng@0.4.0~prepublish: no script for prepublish, continuing
12 verbose tar pack [ '/Users/shane/.npm/memwatch-ng/0.4.0/package.tgz',
12 verbose tar pack   '/Users/shane/dev/memwatch-ng' ]
13 verbose tarball /Users/shane/.npm/memwatch-ng/0.4.0/package.tgz
14 verbose folder /Users/shane/dev/memwatch-ng
15 verbose addLocalTarball adding from inside cache /Users/shane/.npm/memwatch-ng/0.4.0/package.tgz
16 verbose correctMkdir /Users/shane/.npm correctMkdir not in flight; initializing
17 silly cache afterAdd memwatch-ng@0.4.0
18 verbose afterAdd /Users/shane/.npm/memwatch-ng/0.4.0/package/package.json not in flight; writing
19 verbose correctMkdir /Users/shane/.npm correctMkdir not in flight; initializing
20 verbose afterAdd /Users/shane/.npm/memwatch-ng/0.4.0/package/package.json written
21 silly publish { name: 'memwatch-ng',
21 silly publish   description: 'Keep an eye on your memory usage, and discover and isolate leaks.',
21 silly publish   version: '0.4.0',
21 silly publish   author: { name: 'Shane Rowatt', url: 'http://www.shanerowatt.com' },
21 silly publish   engines: { node: '>= 0.8.0' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/srowatt/memwatch-ng.git' },
21 silly publish   main: 'include.js',
21 silly publish   licenses: [ { type: 'wtfpl' } ],
21 silly publish   bugs: { url: 'https://github.com/srowatt/memwatch-ng/issues' },
21 silly publish   scripts:
21 silly publish    { install: 'node-gyp rebuild',
21 silly publish      test: 'mocha tests --reporter spec' },
21 silly publish   devDependencies: { mocha: '^2.4.5', should: '^8.3.1' },
21 silly publish   contributors:
21 silly publish    [ { name: 'Shane Rowatt', url: '@srowatt' },
21 silly publish      { name: 'Jed Parsons', url: '@jedp' },
21 silly publish      { name: 'Jeff Haynie', url: '@jhaynie' },
21 silly publish      { name: 'Justin Matthews', url: '@jmatthewsr-ms' } ],
21 silly publish   dependencies: { bindings: '^1.2.1', nan: '^2.3.2' },
21 silly publish   readme: '`node-memwatch`: Leak Detection and Heap Diffing for Node.JS\n============================================================\n\n[![Build Status](https://travis-ci.org/srowatt/memwatch-ng.svg?branch=master)](https://travis-ci.org/srowatt/memwatch-ng)\n\n`node-memwatch` is here to help you detect and find memory leaks in\nNode.JS code.  It provides:\n\n- A `leak` event, emitted when it appears your code is leaking memory.\n\n- A `stats` event, emitted occasionally, giving you\n  data describing your heap usage and trends over time.\n\n- A `HeapDiff` class that lets you compare the state of your heap between\n  two points in time, telling you what has been allocated, and what\n  has been released.\n\n\nInstallation\n------------\n\n- `npm install memwatch-ng`\n\nor\n\n- `git clone git://github.com/srowatt/memwatch-ng.git`\n\n\nDescription\n-----------\n\nThere are a growing number of tools for debugging and profiling memory\nusage in Node.JS applications, but there is still a need for a\nplatform-independent native module that requires no special\ninstrumentation.  This module attempts to satisfy that need.\n\nTo get started, import `node-memwatch` like so:\n\n```javascript\nvar memwatch = require(\'memwatch-ng\');\n```\n\n### Leak Detection\n\nYou can then subscribe to `leak` events.  A `leak` event will be\nemitted when your heap usage has increased for five consecutive\ngarbage collections:\n\n```javascript\nmemwatch.on(\'leak\', function(info) { ... });\n```\n\nThe `info` object will look something like:\n\n```javascript\n{ start: Fri, 29 Jun 2012 14:12:13 GMT,\n  end: Fri, 29 Jun 2012 14:12:33 GMT,\n  growth: 67984,\n  reason: \'heap growth over 5 consecutive GCs (20s) - 11.67 mb/hr\' }\n```\n\nBy default, leaks are defined as 5 consecutive calls to the garbage collector \nthat result in an increase of memory. To change the number of consecutive \nincreases of memory limit, call \n\n```javascript\nmemwatch.set_consecutive_growth_limit(10);\n```\n\n### Heap Usage\n\nThe best way to evaluate your memory footprint is to look at heap\nusage right aver V8 performs garbage collection.  `memwatch` does\nexactly this - it checks heap usage only after GC to give you a stable\nbaseline of your actual memory usage.\n\nWhen V8 performs a garbage collection (technically, we\'re talking\nabout a full GC with heap compaction), `memwatch` will emit a `stats`\nevent.\n\n```javascript\nmemwatch.on(\'stats\', function(stats) { ... });\n```\n\nThe `stats` data will look something like this:\n\n```javascript\n{\n  "num_full_gc": 17,\n  "num_inc_gc": 8,\n  "heap_compactions": 8,\n  "estimated_base": 2592568,\n  "current_base": 2592568,\n  "min": 2499912,\n  "max": 2592568,\n  "usage_trend": 0\n}\n```\n\n`estimated_base` and `usage_trend` are tracked over time.  If usage\ntrend is consistently positive, it indicates that your base heap size\nis continuously growing and you might have a leak.\n\nV8 has its own idea of when it\'s best to perform a GC, and under a\nheavy load, it may defer this action for some time.  To aid in\nspeedier debugging, `memwatch` provides a `gc()` method to force V8 to\ndo a full GC and heap compaction.\n\n\n### Heap Diffing\n\nSo far we have seen how `memwatch` can aid in leak detection.  For\nleak isolation, it provides a `HeapDiff` class that takes two snapshots\nand computes a diff between them.  For example:\n\n```javascript\n// Take first snapshot\nvar hd = new memwatch.HeapDiff();\n\n// do some things ...\n\n// Take the second snapshot and compute the diff\nvar diff = hd.end();\n```\n\nThe contents of `diff` will look something like:\n\n```javascript\n{\n  "before": { "nodes": 11625, "size_bytes": 1869904, "size": "1.78 mb" },\n  "after":  { "nodes": 21435, "size_bytes": 2119136, "size": "2.02 mb" },\n  "change": { "size_bytes": 249232, "size": "243.39 kb", "freed_nodes": 197,\n    "allocated_nodes": 10007,\n    "details": [\n      { "what": "String",\n        "size_bytes": -2120,  "size": "-2.07 kb",  "+": 3,    "-": 62\n      },\n      { "what": "Array",\n        "size_bytes": 66687,  "size": "65.13 kb",  "+": 4,    "-": 78\n      },\n      { "what": "LeakingClass",\n        "size_bytes": 239952, "size": "234.33 kb", "+": 9998, "-": 0\n      }\n    ]\n  }\n}\n```\n\nThe diff shows that during the sample period, the total number of\nallocated `String` and `Array` classes decreased, but `Leaking Class`\ngrew by 9998 allocations.  Hmmm.\n\nYou can use `HeapDiff` in your `on(\'stats\')` callback; even though it\ntakes a memory snapshot, which triggers a V8 GC, it will not trigger\nthe `stats` event itself.  Because that would be silly.\n\n\nFuture Work\n-----------\n\nPlease see the Issues to share suggestions and contribute!\n\n\nLicense\n-------\n\nhttp://wtfpl.org\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: '97c2e967e1d4ea23497b3aed77c66bf1de107870',
21 silly publish   gypfile: true,
21 silly publish   homepage: 'https://github.com/srowatt/memwatch-ng#readme',
21 silly publish   _id: 'memwatch-ng@0.4.0',
21 silly publish   _shasum: '5ef155a5422fb2190fdda84f5c9aee4320f2b19a',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 silly mapToRegistry name memwatch-ng
24 silly mapToRegistry using default registry
25 silly mapToRegistry registry https://registry.npmjs.org/
26 silly mapToRegistry data Result {
26 silly mapToRegistry   raw: 'memwatch-ng',
26 silly mapToRegistry   scope: null,
26 silly mapToRegistry   name: 'memwatch-ng',
26 silly mapToRegistry   rawSpec: '',
26 silly mapToRegistry   spec: 'latest',
26 silly mapToRegistry   type: 'tag' }
27 silly mapToRegistry uri https://registry.npmjs.org/memwatch-ng
28 verbose publish registryBase https://registry.npmjs.org/
29 silly publish uploading /Users/shane/.npm/memwatch-ng/0.4.0/package.tgz
30 verbose request uri https://registry.npmjs.org/memwatch-ng
31 verbose request sending authorization for write operation
32 info attempt registry request try #1 at 9:48:56 PM
33 verbose request using bearer token for auth
34 verbose request id 9993ad6b81aafb3a
35 http request PUT https://registry.npmjs.org/memwatch-ng
36 http 403 https://registry.npmjs.org/memwatch-ng
37 verbose headers { 'content-type': 'application/json',
37 verbose headers   'cache-control': 'max-age=300',
37 verbose headers   'content-length': '95',
37 verbose headers   'accept-ranges': 'bytes',
37 verbose headers   date: 'Fri, 09 Dec 2016 11:54:56 GMT',
37 verbose headers   via: '1.1 varnish',
37 verbose headers   connection: 'keep-alive',
37 verbose headers   'x-served-by': 'cache-mel6520-MEL',
37 verbose headers   'x-cache': 'MISS',
37 verbose headers   'x-cache-hits': '0',
37 verbose headers   'x-timer': 'S1481284495.760273,VS0,VE847',
37 verbose headers   vary: 'Accept-Encoding' }
38 verbose request invalidating /Users/shane/.npm/registry.npmjs.org/memwatch-ng on PUT
39 error publish Failed PUT 403
40 verbose stack Error: "You cannot publish over the previously published version 0.4.0." : memwatch-ng
40 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
40 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
40 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
40 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:199:22)
40 verbose stack     at emitTwo (events.js:88:13)
40 verbose stack     at Request.emit (events.js:173:7)
40 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1036:10)
40 verbose stack     at emitOne (events.js:83:20)
40 verbose stack     at Request.emit (events.js:170:7)
40 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:963:12)
41 verbose statusCode 403
42 verbose pkgid memwatch-ng
43 verbose cwd /Users/shane/dev/memwatch-ng
44 error Darwin 13.4.0
45 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
46 error node v5.2.0
47 error npm  v3.8.3
48 error code E403
49 error "You cannot publish over the previously published version 0.4.0." : memwatch-ng
50 error If you need help, you may report this error at:
50 error     <https://github.com/npm/npm/issues>
51 verbose exit [ 1, true ]
